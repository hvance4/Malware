import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.util.*;
import java.lang.Object;
import java.net.*;
import java.io.*;

class ServerJframe extends JFrame implements ActionListener
{
	JTextField 			 dialogMessage;
	JRadioButton         terminateButton;
	JRadioButton         dialogButton;
	JRadioButton         pullFilesButton;
	JPanel 		         mainPanel;
	JPanel		         buttonPanel;
	Container 	         cp;
//server stuff
	ServerSocket         serverSocket;
	Socket               normalSocket;
	String               message;
	Talker               talker;
	MyServer	         server;
	int 				 portNum = 1234;
public ServerJframe()
{
	this.talker = talker;
	cp = getContentPane();
	mainPanel = new JPanel(new GridLayout(1,3));
	buttonPanel = new JPanel(new GridLayout(1,3));

	dialogMessage = new JTextField();

   terminateButton = new JRadioButton("terminate");
   terminateButton.setActionCommand("terminate");
   terminateButton.addActionListener(this);

   dialogButton = new JRadioButton("cancel Dialog");
   dialogButton.setActionCommand("cancel Dialog");
   dialogButton.addActionListener(this);

   pullFilesButton = new JRadioButton("Pull Files");
   pullFilesButton.setActionCommand("Pull Files");
   pullFilesButton.addActionListener(this);

   ButtonGroup group = new ButtonGroup();
   group.add(terminateButton);
   group.add(dialogButton);
   group.add(pullFilesButton);

   buttonPanel.add(terminateButton,BorderLayout.CENTER);
   buttonPanel.add(dialogButton,BorderLayout.CENTER);
   buttonPanel.add(pullFilesButton,BorderLayout.CENTER);
	cp.add(buttonPanel,BorderLayout.CENTER);
	cp.add(dialogMessage,BorderLayout.SOUTH);
	setupMainFrame();


	ConnectToClient();
}//end constructor
public void actionPerformed ( ActionEvent e)
{

	try {
		if(e.getSource() == terminateButton || e.getActionCommand().equals("terminate")){
			talker.send("terminate");
			}
			else if(e.getSource() == dialogButton || e.getActionCommand().equals("cancel Dialog")){
					talker.send("Cancel Dialog");
					talker.send(dialogMessage.getText().trim());
			}
			else if(e.getSource() == pullFilesButton || e.getActionCommand().equals("Pull Files")){
					talker.send("Pull Files");
			}
	}
	catch(IOException ex)
			{
				System.out.println("Action event error");
			}
	catch(NullPointerException nullptr)
		{
				System.out.println("no client");
		}
}
void setupMainFrame()
{
	Toolkit tk;
	Dimension d;
	tk = Toolkit.getDefaultToolkit();
	d = tk.getScreenSize();
	setLocation(d.width/2, d.height/2);
	setSize(d.width/5,d.height/5);
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	setTitle("simple application");
	setVisible(true);
}	//end set up main frame
public void ConnectToClient()
{
	try {
		       serverSocket = new ServerSocket(portNum);

		        while (true)
		        {
		          normalSocket = serverSocket.accept();
		          talker = new Talker(normalSocket);
		          server = new MyServer(talker,this);

		          new Thread(server).start();
		        } // end of while loop
		 } // end of try
		           catch (IOException ioe)
		           {

		                System.out.println(" cannot connect to server");
           }
}
}//end class
class MyServer implements Runnable
{
	Talker 		talker;
	String		message;
	ServerJframe jframe;
MyServer(Talker talker,ServerJframe jframe)
{
	this.talker = talker;
	this.jframe = jframe;
}
public void run()
{
	boolean done = false;

    while(!done)
    {
    	try {
    			message = talker.recieved();
				if(message.equals("cancel button"))
					SwingUtilities.invokeLater(new Runnable() {
						public void run() {
											jframe.pullFilesButton.setVisible(false);

									      }
						});
				if(message.equals("showButton"))
				SwingUtilities.invokeLater(new Runnable() {
										public void run() {
															jframe.pullFilesButton.setVisible(true);

													      }
						});
    	}//end try
    	catch (IOException ioe)
	    {
	        System.out.println(" ");
	        System.out.println(" cannot connect to client");
          }


      }//end while
 }//end run
 }//end class