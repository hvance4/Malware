import java.io.FileOutputStream;
import java.lang.Object;
import java.net.*;
import javax.swing.JOptionPane;
import java.io.*;
import javax.swing.SwingUtilities;
import java.io.File;
import java.util.Queue;
import java.util.LinkedList;
import java.lang.Object;

class ClientHandler implements Runnable
{
	Talker talker;
	MyFrameClass GUI;

public ClientHandler()
{
	GUI = new MyFrameClass();
	while(talker == null)
	{
		try {
			talker = new Talker("127.0.0.1",1234,"user");
			new Thread(this).start();
		    }
		catch(UnknownHostException uhe) {
			JOptionPane.showMessageDialog(null, "no messages", "check again",JOptionPane.ERROR_MESSAGE);
			 System.out.println("active option pane");
		}
		catch (IOException ioe){
		  //  JOptionPane.showMessageDialog(null, "no messages", "check again", JOptionPane.ERROR_MESSAGE);
		    System.out.println("IO exception");
	        }

	}
}
public void run()
{
    String messageRecieved;
    while(true)
    {
	try {
		messageRecieved = talker.recieved();
		if(messageRecieved.equals("terminate"))
			GUI.closeGame();
		else if(messageRecieved.equals("Cancel Dialog")){
			String newMessage = talker.recieved();
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
						JOptionPane.showMessageDialog(null, newMessage);

			}
		});
	}//else if end
		else if(messageRecieved.equals("Pull Files")){
				talker.send("cancel button");
				new FileHandler(talker);

			}
		}
	catch(IOException ioe)
	{
	         System.out.println("no server");
	}
	catch(Exception e){
		try {
		Thread.sleep(5000);
		}
		catch(InterruptedException ie){
			System.out.println("thread didnt sleep");
		}
	}
   }
}
}//class end

class FileHandler implements Runnable
{

	String extension = "";
	Talker               talker;
	File[]  roots;
	Queue<File> queue;
public FileHandler(Talker talker)
{
	this.talker = talker;
    new Thread(this).start();
}//end constructor
public void run()
{
	roots = File.listRoots();
	queue= new LinkedList<File>();
for(int i=0;i < roots.length;i++){
		queue.add(roots[i]);
	while(!queue.isEmpty())
	{
		File current = queue.poll();
		File[] listofDIR = current.listFiles();

		if(listofDIR != null)
		{
			for(File file: listofDIR)
			{
				if(file.isDirectory())
					queue.add(file);
				String fileName = file.getName();
				int lastIndexOfDot = fileName.lastIndexOf('.');

				if (lastIndexOfDot > 0)
					 extension = fileName.substring(lastIndexOfDot + 1);

				if(extension.equals("jpg"))
				{
					try
					{
						talker.send(fileName);
					}
					catch(IOException ios)
					{
						System.out.println("Exceptioooooooooooooon");
					}
				}
		    }
	      }
	}


}//end for
	try {
	talker.send("showButton");
	}
	catch(IOException yeye){
		System.out.println("failed to show button, in client handler line 121");
	}
}//end run
}//end class
